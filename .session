;;; Automatically generated on Fri Nov 28 15:22:40 2014
;;; Invoked by crane@Crane-Linux using 24.3.1
(setq-default session-file-alist '(("~/.emacs.d/elpa/clj-refactor-0.13.0/clj-refactor-autoloads.el" 4301 nil 1 nil nil 4301 (overwrite-mode)) ("~/.emacs.d/init.el" 7387 6326 1 nil nil 11795 (overwrite-mode)) ("~/.emacs.d/elpa/evil-matchit-1.4.1/evil-matchit-autoloads.el" 6956 nil 1 nil nil 6956 (overwrite-mode)) ("~/.emacs.d/elpa/clojure-mode-3.0.1/clojure-mode-autoloads.el" 538 nil 1 nil nil 538 (overwrite-mode)) ("~/.emacs.d/elpa/fancy-narrow-20141123.617/fancy-narrow-autoloads.el" 2880 nil 1 nil nil 2880 (overwrite-mode)) ("~/.emacs.d/elpa/helm-20141127.634/helm-autoloads.el" 40961 nil 1 nil nil 40961 (overwrite-mode)) ("~/.emacs.d/elpa/js2-mode-20141118/js2-mode-autoloads.el" 1141 nil 1 nil nil 1141 (overwrite-mode)) ("~/.emacs.d/elpa/magit-90141127/magit-autoloads.el" 26291 nil 1 nil nil 26291 (overwrite-mode)) ("~/.emacs.d/elpa/popup-0.5.1/popup-autoloads.el" 176 nil 1 nil nil 176 (overwrite-mode)) ("~/.emacs.d/elpa/smartparens-1.6.2/smartparens-autoloads.el" 6285 nil 1 nil nil 6285 (overwrite-mode)) ("~/.emacs.d/elpa/w3m-20141125.1729/w3m-autoloads.el" 19249 nil 1 nil nil 19249 (overwrite-mode)) ("~/.emacs.d/elpa/yaml-mode-0.0.11/yaml-mode-autoloads.el" 609 nil 1 nil nil 609 (overwrite-mode)) ("~/.bashrc" 6788 4319 1 nil nil 4319 (overwrite-mode)) ("~/codes/clojures/snake.clj" 875 8338 1 nil nil 8338 (overwrite-mode)) ("~/.android/androidtool.cfg" 164 nil 1 nil nil 164 (overwrite-mode)) ("~/入党申请书.txt" 1018 1009 1 nil nil 1032 (overwrite-mode)) ("~/.lein/profiles.clj" 47 42 1 nil nil 47 (overwrite-mode)) ("~/.emacs.d/elpa/cider-0.8.1/cider-autoloads.el" 5534 nil 1 nil nil 5534 (overwrite-mode)) ("~/codes/clojures/maze.clj" 5597 5124 1 nil nil 6069 (overwrite-mode)) ("~/test.txt" 12 1 1 nil nil 8 (overwrite-mode)) ("~/CodeLife/clojure-notes/ClojureProgramming/ch01-welcome-repl-interactions.clj" 1428 nil 1 nil nil 7672 (overwrite-mode)) ("~/.emacs.d/elpa/fill-column-indicator-1.86/fill-column-indicator-autoloads.el" 1118 nil 1 nil nil 1118 (overwrite-mode)) ("~/CodeLife/clojure-notes/Q&A" 97 225 1 nil nil 490 (overwrite-mode)) ("~/crane-blog/src/crane_blog/views/article.clj" 2060 2060 1 nil nil 2060 (overwrite-mode)) ("~/.lein/user.clj" 132 1 1 nil nil 132 (overwrite-mode)) ("~/crane-blog/src/crane_blog/views/common.clj" 352 nil 1 nil nil 352 (overwrite-mode)) ("~/crane-blog/project.clj" 87 nil 1 nil nil 139 (overwrite-mode)) ("~/.emacs.d/elpa/ac-nrepl-0.21/ac-nrepl-autoloads.el" 2298 nil 1 nil nil 2298 (overwrite-mode)) ("~/.emacs.d/elpa/cider-0.7.0/cider-autoloads.el" 3618 nil 1 nil nil 3618 (overwrite-mode)) ("~/.emacs.d/elpa/clojure-mode-3.0.0/clojure-mode-autoloads.el" 539 nil 1 nil nil 539 (overwrite-mode)) ("~/.emacs.d/init-elpa.el" 3499 3434 1 nil nil 3499 (overwrite-mode)) ("~/.emacs.d/elpa/ac-cider-20141013.1019/ac-cider-autoloads.el" 1380 nil 1 nil nil 1380 (overwrite-mode)) ("~/.emacs.d/elpa/cider-20141115.815/cider-autoloads.el" 5535 nil 1 nil nil 5535 (overwrite-mode)) ("~/.emacs.d/elpa/js2-mode-20141115/js2-mode-autoloads.el" 1144 nil 1 nil nil 1144 (overwrite-mode)) ("~/.emacs.d/elpa/zenburn-theme-2.2/zenburn-theme-autoloads.el" 487 nil 1 nil nil 487 (overwrite-mode)) ("~/crane-blog/src/crane_blog/views/login.clj" 1014 nil 1 nil nil 1014 (overwrite-mode)) ("~/crane-blog/src/crane_blog/views/welcome.clj" 359 nil 1 nil nil 359 (overwrite-mode)) ("~/.emacs.d/elpa/emmet-mode-1.0.10/emmet-mode-autoloads.el" 1724 nil 1 nil nil 1724 (overwrite-mode)) ("~/.emacs.d/elpa/rainbow-mode-0.10/rainbow-mode-autoloads.el" 521 nil 1 nil nil 521 (overwrite-mode)) ("~/command-line-args/test/command_line_args/core_test.clj" 476 112 1 nil nil 476 (overwrite-mode)) ("~/command-line-args/src/command_line_args/core.clj" 132 1 1 nil nil 132 (overwrite-mode)) ("~/command-line-args/project.clj" 329 336 1 nil nil 329 (overwrite-mode)) ("~/.emacs.d/elpa/projectile-0.10.0/projectile-autoloads.el" 2054 nil 1 nil nil 2054 (overwrite-mode)) ("~/bin/lein" 1 11956 1 nil nil 11958 (overwrite-mode)) ("~/.emacs.d/elpa/cider-0.5.0/cider-autoloads.el" 2366 nil 1 nil nil 2366 (overwrite-mode)) ("~/.emacs.d/elpa/pkg-info-0.5/pkg-info-autoloads.el" 3976 nil 1 nil nil 3976 (overwrite-mode)) ("~/.emacs.d/elpa/epl-0.7/epl-autoloads.el" 171 nil 1 nil nil 171 (overwrite-mode)) ("~/.emacs.d/elpa/clojure-mode-2.1.1/clojure-mode-autoloads.el" 1109 nil 1 nil nil 1109 (overwrite-mode)) ("~/codes/javacodes/Generics.java" 86 nil 1 nil nil 86 (overwrite-mode)) ("~/codes/c-code/VirtualBase.cpp" 641 104 1 nil nil 641 (overwrite-mode)) ("~/codes/c-code/AnimalManager.cpp" 1 nil 1 nil nil 1 (overwrite-mode)) ("~/codes/c-code/staticlist.cpp" 663 432 1 nil nil 692 (overwrite-mode)) ("~/codes/c-code/mypoint/tpoint1.h" 92 313 1 nil nil 90 (overwrite-mode)) ("~/codes/c-code/mypoint/tpoint1.cpp" 166 nil 1 nil nil 166 (overwrite-mode)) ("~/codes/c-code/hash.c" 1572 59 1 nil nil 59 (overwrite-mode))))
(setq-default file-name-history '("~/.emacs.d/elpa/clj-refactor-0.13.0/clj-refactor-autoloads.el" "~/crane-blog/src/crane_blog/views/article.clj" "/home/crane/.emacs.d/init.el" "~/.emacs.d/init.el" "/home/crane/crane-blog/src/crane_blog/views/article.clj" "~/.emacs.d/elpa/evil-matchit-1.4.1/evil-matchit-autoloads.el" "~/.emacs.d/elpa/clojure-mode-3.0.1/clojure-mode-autoloads.el" "~/.emacs.d/elpa/fancy-narrow-20141123.617/fancy-narrow-autoloads.el" "~/.emacs.d/elpa/helm-20141127.634/helm-autoloads.el" "~/.emacs.d/elpa/js2-mode-20141118/js2-mode-autoloads.el" "~/.emacs.d/elpa/magit-90141127/magit-autoloads.el" "~/.emacs.d/elpa/popup-0.5.1/popup-autoloads.el" "~/.emacs.d/elpa/smartparens-1.6.2/smartparens-autoloads.el" "~/.emacs.d/elpa/w3m-20141125.1729/w3m-autoloads.el" "~/.emacs.d/elpa/yaml-mode-0.0.11/yaml-mode-autoloads.el" "/home/crane/Downloads/MedalRankingsApp.java" "~/.android/androidtool.cfg" "/home/crane/.android/androidtool.cfg" "/home/crane/入党申请书.txt" "~/.bashrc" "/home/crane/.bashrc" "/home/crane/bin/lein" "/home/crane/codes/clojures/snake.clj" "/home/crane/codes/clojures/maze.clj" "~/.lein/profiles.clj" "/home/crane/.lein/profiles.clj" "~/.emacs.d/elpa/cider-0.8.1/cider-autoloads.el" "/home/crane/CodeLife/clojure-notes/Q&A" "/home/crane/test.txt" "~/.emacs.d/elpa/fill-column-indicator-1.86/fill-column-indicator-autoloads.el" "/home/crane/CodeLife/clojure-notes/ClojureProgramming/ch02-FP-repl-interactions.clj" "/home/crane/CodeLife/clojure-notes/ClojureProgramming/ch01-welcome-repl-interactions.clj" "/home/crane/crane-blog/src/crane_blog/views/common.clj" "/home/crane/.lein/user.clj" "/home/crane/crane-blog/project.clj" "~/.emacs.d/elpa/ac-nrepl-0.21/ac-nrepl-autoloads.el" "/home/crane/.emacs.d/elpa/cljdoc-0.1.0/cljdoc.el" "/home/crane/.emacs.d/elpa/cljdoc-0.1.0/cljdoc-autoloads.el" "~/org.ics" "~/.emacs.d/elpa/cider-0.7.0/cider-autoloads.el" "~/.emacs.d/elpa/clojure-mode-3.0.0/clojure-mode-autoloads.el" "/home/crane/.emacs.d/init-elpa.el.save" "~/.emacs.d/init-elpa.el" "/home/crane/.emacs.d/init-elpa.el" "~/.emacs.d/elpa/ac-cider-20141013.1019/ac-cider-autoloads.el" "~/.emacs.d/elpa/cider-20141115.815/cider-autoloads.el" "~/.emacs.d/elpa/js2-mode-20141115/js2-mode-autoloads.el" "~/.emacs.d/elpa/zenburn-theme-2.2/zenburn-theme-autoloads.el" "/home/crane/.emacs.d/elpa/popup-0.5/popup-autoloads.el" "/home/crane/.emacs-places" "/home/crane/crane-blog/src/crane_blog/views/login.clj" "~/.emacs.d/elpa/emmet-mode-1.0.10/emmet-mode-autoloads.el" "~/.emacs.d/elpa/rainbow-mode-0.10/rainbow-mode-autoloads.el" "/home/crane/.emacs.d/elpa/ac-cider-readme.txt" "/home/crane/crane-blog/src/crane_blog/views/welcome.clj" "~/crane-blog/src/crane_blog/views/welcome.clj" "/media/crane/新加卷/workspace/OrderSystem/src/hust/groupwork/ordersys/frame/DishesManagerFrame.java" "~/command-line-args/src/command_line_args/core.clj" "/home/crane/command-line-args/test/command_line_args/core_test.clj" "/home/crane/command-line-args/src/command_line_args/core.clj" "/home/crane/command-line-args/project.clj" "~/.emacs.d/elpa/projectile-0.10.0/projectile-autoloads.el" "~/.emacs.d/elpa/cider-0.5.0/cider-autoloads.el" "~/.emacs.d/elpa/pkg-info-0.5/pkg-info-autoloads.el" "~/.emacs.d/elpa/epl-0.7/epl-autoloads.el" "~/.emacs.d/elpa/clojure-mode-2.1.1/clojure-mode-autoloads.el" "/home/crane/codes/javacodes/Generics.java" "~/AndroidStudio/android-studio/bin/studio.sh" "/home/crane/codes/c-code/AnimalManager.cpp" "/home/crane/codes/c-code/VirtualBase.cpp" "/home/crane/codes/c-code/.#VirtualBase.cpp" "/home/crane/codes/c-code/staticlist.cpp" "/home/crane/codes/c-code/mypoint/tpoint1.cpp" "/home/crane/codes/c-code/mypoint/tpoint1.h" "/home/crane/codes/c-code/pointer.cpp" "~/codes/c-code/pointer.cpp" "/home/crane/codes/c-code/hash.c" "/home/crane/codes/c-code/TestOne.cpp" "/home/crane/codes/c-code/justtest.cpp" "/home/crane/codes/c-code/consttest.cpp" "/tmp/.fr-5aN0Ph/aliedit.sh" "/home/crane/codes/c-code/MyClass.cpp" "/home/crane/codes/javacodes/HeapOOM.java" "~/workspace/ApiDemos/README.txt" "/home/crane/android-dev-tools/app/kelvin/src/sg/nus/KelvinSungEX2/MainActivity.java" "/home/crane/android-dev-tools/app/KelvinSungEX2/AndroidManifest.xml" "/home/crane/android-dev-tools/app/kelvin/res/layout/select_image_fragment.xml" "/home/crane/android-dev-tools/app/Kelvin.apk" "/etc/hosts" \.\.\.))
(setq-default buffer-name-history '("*Packages*" "*cider-repl ~:35491*" "init.el" "*cider-repl ~:42211*" "article.clj" "*scratch*" "*Customize Group: Rainbow Delimiters Faces*" "androidtool.cfg" "入党申请书.txt" "*cider-repl clojures:40961*" "snake.clj" ".bashrc" "*cider-result*" "*helm-mode-load-file*" "profiles.clj" "*cider-repl localhost:47959*" "*cider-repl localhost:40699*" "maze.clj" "*cider-repl localhost:44672*" "*eshell*" "*cider-repl localhost:49696*" "*cider-repl localhost:39189*" "*cider-repl localhost*" "Q&A" "user.clj" "common.clj" "*cider-error*" "*cider-doc*" "crane" "*cider-repl crane-blog*" "*nrepl-server crane-blog*<2>" "*cider-repl crane-blog*<2>" "*cider-repl crane-blog*<3>" "*cider-repl .emacs.d*" "*cider-repl crane-blog:53678*" "*cider-repl crane-blog:57630*" "*cider-repl ~*" "welcome.clj" "*cider-repl command-line-args*" "core_test.clj" "linuxC.sh" "init-emacs-w3m.el" "network.sh" "policykit.sh" "node" "justtest.cpp" "time.c"))
(setq-default command-history '((kill-buffer "*Packages*") (package-list-packages nil) (execute-extended-command nil "package-list-packages") (switch-to-buffer "*cider-repl ~:35491*") (switch-to-buffer "article.clj") (find-file "/home/crane/.emacs.d/init.el")))
(setq-default compile-history '("gcc test.c -o test" "gcc time.c -o time" "gcc -o time.c time" "gcc -o time.c time.out" "javac FirstJava.java" "javac"))
(setq-default dired-shell-command-history '("dired" "open"))
(setq-default extended-command-history '("package-list-packages" "load-file" "version" "customize-group" "replace-string" "w3m" "query-replace" "eshell" "cd" "fci-mode" "turn-on-fci-mode" "mkdir" "cider-jack-in" "auto-complete-mode" "package-list-packages-no-fetch" "company-mode" "cider-quit" "org-export-icalendar-combine-agenda-files" "package-refresh-contents" "package-install" "cider-version" "cider-mode" "imenu" "goto-line" "mouse-secondary-save-then-kill" "shell" "save-buffers-kill-terminal" "make-directory" "Buffer-menu-this-window" \.\.\.))
(setq-default gud-gdb-history '("gdb time" "gdb FirstJava"))
(setq-default gud-jdb-history '("javac Hello.java" "jdb FirstJava" "jdb FirstJava.java"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (cl-loop for i in command-history unless \.\.\. collect \.\.\.)) (type . sexp)))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) \.\.\.)))
(setq-default helm-ff-history '("/home/crane/.emacs.d/" "/home/crane/.android/" "/home/crane/" "/home/crane/.lein/" "/home/crane/.emacs.d/elpa/cider-0.7.0/" "/home/crane/.emacs.d/elpa/" "/home/crane/codes/" "/home/crane/crane-blog/" "/media/crane/新加卷/workspace/OrderSystem/src/hust/groupwork/ordersys/frame/" "/home/crane/command-line-args/src/command_line_args/" "/home/crane/command-line-args/test/command_line_args/" "/home/crane/codes/c-code/mypoint/" "/home/crane/codes/c-code/" "/home/crane/codes/javacodes/"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p \.\.\.)) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda \.\.\. \.\.\. \.\.\.) ("Find file in helm" lambda \.\.\. \.\.\.))))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (cl-loop for i in command-history unless \.\.\. collect \.\.\.)) (type . sexp)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) \.\.\.)))
(setq-default ido-buffer-history '("*Packages*" "*cider-repl ~:35491*" #("article.clj" 0 11 (face ido-virtual)) "init.el" "*cider-repl ~:42211*" "article.clj" "*scratch*" "*Customize Group: Rainbow Delimiters Faces*" "androidtool.cfg" "入党申请书.txt" "*cider-repl clojures:40961*" "snake.clj" ".bashrc" "*cider-result*" "*helm-mode-load-file*" "profiles.clj" "*cider-repl localhost:47959*" "*cider-repl localhost:40699*" "maze.clj" "*cider-repl localhost:44672*" "*eshell*" "*cider-repl localhost:49696*" "*cider-repl localhost:39189*" "*cider-repl localhost*" "Q&A" "user.clj" "common.clj" "*cider-error*" "*cider-doc*" "crane" "*cider-repl crane-blog*" "*nrepl-server crane-blog*<2>" "*cider-repl crane-blog*<2>" "*cider-repl crane-blog*<3>" "*cider-repl .emacs.d*" "*cider-repl crane-blog:53678*" "*cider-repl crane-blog:57630*" "*cider-repl ~*" "welcome.clj" #("welcome.clj" 0 11 (face ido-virtual)) #("core.clj" 0 8 (face ido-virtual)) "*cider-repl command-line-args*" "core_test.clj" nil "linuxC.sh" "init-emacs-w3m.el" "network.sh" "policykit.sh" "justtest.cpp" "time.c"))
(setq-default minibuffer-history '("/home/crane/.emacs.d/init.el" "rain" "/home/crane/.android/androidtool.cfg" "/home/crane/.bashrc" "/home/crane/.lein/profiles.clj" "/home/crane/.emacs.d/elpa/cider-0.7.0/" "/home/crane/.emacs.d/elpa/" "version" "" "conn-info" "(def v [1 2 3])" "/home/crane/codes/clojures" "user" "/home/crane/.emacs.d/init-elpa.el" "ac-cider" "cider" "crane-" "/home/crane/.android/androidtool.c" "projectile" "clo" "14" "/home/crane/codes/c-code/mypoint" "/home/crane/codes/c-code/point" "/home/crane/codes/javacodes/annotations" "/home/crane/Native" "/etc/apt/source.list" "/home/crane/codes/gradle" "141" "/etc/.bash" "c-outline-level" "/home/crane/codes/javacodes/Contructor" \.\.\.))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("共产党" "共-产-党" "邓小平" "邓-小-平" "only" "just" "haha" "for " "for" "enter" "new" "pro" "profiles" "GetStaticMethodID" "GetMethodID" "renhe940318" "username" "altered" "changed"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default shell-command-history '("cd codes" "cd ~/home"))
(setq-default smex-history '(version info cd 5x5 all arp dbx))
