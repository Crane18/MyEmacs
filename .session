;;; Automatically generated on Sun May 18 19:23:32 2014
;;; Invoked by crane@Crane-Linux using 24.3.1
(setq-default kill-ring '(#(";; ;; set new method of kill a whole line (defadvice kill-ring-save (before slickcopy activate compile)" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 6 (face font-lock-comment-face fontified t) 6 103 (face font-lock-comment-face fontified t)) #(";;   \"When called interactively with no active region, copy a single line instead.\"" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 5 (face font-lock-comment-delimiter-face fontified t) 5 83 (face font-lock-comment-face fontified t)) #(";; (interactive" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 4 (face font-lock-comment-face rear-nonsticky t font-lock-face "rainbow-delimiters-depth-1-face" fontified t) 4 15 (face font-lock-comment-face fontified t)) #(";;    (if mark-active (list (region-beginning) (region-end))" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 6 (face font-lock-comment-delimiter-face fontified t) 6 7 (face font-lock-comment-face rear-nonsticky t font-lock-face "rainbow-delimiters-depth-2-face" fontified t) 7 9 (face font-lock-comment-face fontified t) 9 22 (face font-lock-comment-face fontified t) 22 23 (face font-lock-comment-face rear-nonsticky t font-lock-face "rainbow-delimiters-depth-3-face" fontified t) 23 28 (face font-lock-comment-face fontified t) 28 29 (face font-lock-comment-face rear-nonsticky t font-lock-face "rainbow-delimiters-depth-4-face" fontified t) 29 45 (face font-lock-comment-face fontified t) 45 46 (face font-lock-comment-face rear-nonsticky t font-lock-face "rainbow-delimiters-depth-4-face" fontified t) 46 47 (face font-lock-comment-face fontified t) 47 48 (face font-lock-comment-face rear-nonsticky t font-lock-face "rainbow-delimiters-depth-4-face" fontified t) 48 58 (face font-lock-comment-face fontified t) 58 59 (face font-lock-comment-face rear-nonsticky t font-lock-face "rainbow-delimiters-depth-4-face" fontified t) 59 60 (face font-lock-comment-face rear-nonsticky t font-lock-face "rainbow-delimiters-depth-3-face" fontified t)) #(";;      (list (line-beginning-position)" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 8 (face font-lock-comment-delimiter-face fontified t) 8 9 (face font-lock-comment-face fontified t rear-nonsticky t font-lock-face "rainbow-delimiters-depth-3-face") 9 14 (face font-lock-comment-face fontified t) 14 15 (face font-lock-comment-face fontified t rear-nonsticky t font-lock-face "rainbow-delimiters-depth-4-face") 15 38 (face font-lock-comment-face fontified t) 38 39 (face font-lock-comment-face fontified t rear-nonsticky t font-lock-face "rainbow-delimiters-depth-4-face")) #(";;            (line-beginning-position 2)))))" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 14 (face font-lock-comment-delimiter-face fontified t) 14 15 (face font-lock-comment-face fontified t rear-nonsticky t font-lock-face "rainbow-delimiters-depth-4-face") 15 40 (face font-lock-comment-face fontified t) 40 41 (face font-lock-comment-face fontified t rear-nonsticky t font-lock-face "rainbow-delimiters-depth-4-face") 41 42 (face font-lock-comment-face fontified t rear-nonsticky t font-lock-face "rainbow-delimiters-depth-3-face") 42 43 (face font-lock-comment-face fontified t rear-nonsticky t font-lock-face "rainbow-delimiters-depth-2-face") 43 44 (face font-lock-comment-face fontified t rear-nonsticky t font-lock-face "rainbow-delimiters-depth-1-face") 44 45 (face font-lock-comment-face fontified t rear-nonsticky t font-lock-face "rainbow-delimiters-unmatched-face")) #(";; (defadvice kill-region (before sl" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 4 (face font-lock-comment-face fontified t rear-nonsticky t font-lock-face "rainbow-delimiters-depth-1-face") 4 13 (face font-lock-comment-face fontified t) 13 14 (face font-lock-comment-face fontified t) 14 25 (face font-lock-comment-face fontified t) 25 26 (face font-lock-comment-face fontified t) 26 27 (face font-lock-comment-face fontified t rear-nonsticky t font-lock-face "rainbow-delimiters-depth-2-face") 27 36 (face font-lock-comment-face fontified t)) #("
" 0 1 (face font-lock-comment-face fontified t)) ";; set new method of kill a whole line (defadvice kill-ring-save (before slickcopy activate compile)
  \"When called interactively with no active region, copy a single line instead.\"
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
           (line-beginning-position 2)))))

(defadvice kill-region (before slickcut activate compile)
  \"When called interactively with no active region, kill a single line instead.\"
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
           (line-beginning-position 2)))))" #("JNIEXPORT jdouble JNICALL " 0 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 16 (face font-lock-type-face fontified t) 16 17 (face font-lock-type-face c-type c-decl-id-start fontified t) 17 18 (fontified t) 18 24 (face font-lock-variable-name-face fontified t) 24 25 (face font-lock-variable-name-face fontified t) 25 26 (fontified t)) #("JNIEXPORT jdouble JNICALL Java_Compute_compute
  (JNIEnv *, jclass, jint, jlong);" 0 1 (c-is-sws t fontified t) 1 18 (fontified t) 18 24 (face font-lock-type-face fontified t) 24 25 (face font-lock-type-face c-type c-decl-id-start fontified t) 25 26 (fontified t) 26 46 (face font-lock-function-name-face fontified t) 46 49 (fontified t) 49 50 (c-type c-decl-arg-start fontified t) 50 56 (face font-lock-type-face fontified t) 56 58 (fontified t) 58 59 (c-type c-decl-arg-start fontified t) 59 66 (fontified t) 66 67 (c-type c-decl-arg-start fontified t) 67 72 (fontified t) 72 73 (c-type c-decl-arg-start fontified t) 73 81 (fontified t))))
(setq-default session-file-alist '(("~/.emacs.d/init.el" 8611 8610 1 nil nil 8611 (overwrite-mode)) ("~/codes/javacodes/Compute.c" 40 40 1 nil nil 40 (overwrite-mode)) ("~/codes/javacodes/Compute.h" 347 266 1 nil nil 347 (overwrite-mode)) ("~/codes/javacodes/Compute.class" 1 nil 1 nil nil 1 (overwrite-mode)) ("~/codes/javacodes/Compute.java" 254 nil 1 nil nil 254 (overwrite-mode)) ("~/CodeLife/java/getTheOSInfoInJava" 1388 1 1 nil nil 1388 (overwrite-mode)) ("~/codes/javacodes/OSInfo.java" 430 91 1 nil nil 430 (overwrite-mode)) ("~/codes/javacodes/cimplOne.c" 219 45 1 nil nil 217 (overwrite-mode)) ("~/codes/javacodes/linuxC.sh" 397 298 1 nil nil 397 (overwrite-mode)) ("~/codes/c-code/share.c" 110 nil 1 nil nil 109 (overwrite-mode)) ("~/.bashrc" 3904 3871 1 nil nil 3904 (overwrite-mode)) ("~/codes/shellscript/linuxC.sh" 25 nil 1 nil nil 25 (overwrite-mode)) ("~/codes/javacodes/NativeTest.h" 346 295 1 nil nil 346 (overwrite-mode)) ("~/codes/javacodes/NativeTest.java" 210 nil 1 nil nil 210 (overwrite-mode)) ("~/test2.sql" 1441 1405 1 nil nil 1441 (overwrite-mode)) ("~/CodeLife/database/exportOrImportDB" 4 1 1 nil nil 1480 (overwrite-mode)) ("~/commandOfMysql.txt" 2555 2726 1 nil nil 2456 (overwrite-mode)) ("~/CodeLife/database/中文乱码的解决" 1 1864 1 nil nil 1 (overwrite-mode)) ("~/CodeLife/database/索引提高查找效率的原理" 873 1 1 nil nil 2871 (overwrite-mode)) ("~/learningemacs/emacs配置.txt" 227 181 1 nil nil 228 (overwrite-mode)) ("~/.profile" 736 676 1 nil nil 736 (overwrite-mode)) ("~/.emacs.d/elpa/android-mode-0.2.5/android-mode-autoloads.el" 455 nil 1 nil nil 455 (overwrite-mode)) ("~/codes/javacodes/Hello.java" 102 nil 1 nil nil 102 (overwrite-mode)) ("~/android-pro/SecondOne/src/com/crane/secondone/Main.java" 341 nil 1 nil nil 341 (overwrite-mode)) ("~/android-pro/SecondOne/AndroidManifest.xml" 210 nil 1 nil nil 210 (overwrite-mode)) ("~/.netrc" 70 256 1 nil nil 70 (overwrite-mode)) ("~/.emacs.d/mode-line-awesome.el" 29 1 1 nil nil 1127 (overwrite-mode)) ("~/.emacs.d/diminish.el" 12745 1 1 nil nil 14647 (overwrite-mode)) ("~/resumes/应聘Android开发工程师岗位_黄仁鹤_华中科技大学_15527838254.txt" 1135 1092 1 nil nil 1134 (overwrite-mode)) ("~/.emacs.d/emdroid.el" 2363 2325 1 nil nil 2363 (overwrite-mode)) ("~/.emacs.d/java-mode-indent-annotations.el" 5415 1 1 nil nil 1075 (overwrite-mode)) ("~/android-pro/src/com/crane/hello/Hello.java" 485 485 1 nil nil 111 (overwrite-mode)) ("~/android-pro/res/layout/main.xml" 270 432 1 nil nil 270 (overwrite-mode)) ("~/.emacs.d/elpa/android-mode-0.2.5/android-mode.el" 2853 nil 1 nil nil 2788 (overwrite-mode)) ("~/.emacs.d/elpa/ecb-snapshot-20120830/ecb-snapshot-autoloads.el" 2686 nil 1 nil nil 2686 (overwrite-mode)) ("~/.emacs.d/elpa/ecb-2.40/ecb-autoloads.el" 2492 nil 1 nil nil 2492 (overwrite-mode)) ("~/codes/shellscript/exeone.sh" 216 nil 1 nil nil 216 (overwrite-mode)) ("~/codes/shellscript/one.sh" 411 85 1 nil nil 411 (overwrite-mode)) ("~/codes/shellscript/helloworld.sh" 120 33 1 nil nil 120 (overwrite-mode)) ("~/codes/c-code/ConstMethod.cpp" 360 360 1 nil nil 363 (overwrite-mode)) ("~/.emacs.d/init-gnus.el" 1874 1289 1 nil nil 1268 (overwrite-mode)) ("~/codes/shellscript/network.sh" 221 222 1 nil nil 221 (overwrite-mode)) ("~/.authinfo.gpg" 123 1 1 nil nil 123 (overwrite-mode)) ("~/codes/shellscript/policykit.sh" 601 487 1 nil nil 601 (overwrite-mode)) ("~/.emacs-places" 27 nil 1 nil nil 27 (overwrite-mode)) ("~/codes/shellscript/exmaple.js" 239 1 1 nil nil 239 (overwrite-mode)) ("~/codes/pythoncodes/helloworld.py" 78 nil 1 nil nil 78 (overwrite-mode)) ("~/.emacs.d/elpa/github-browse-file-0.3.0/github-browse-file-autoloads.el" 1114 nil 1 nil nil 1114 (overwrite-mode)) ("~/.emacs.d/elpa/w3m-20140420.2007/w3m-autoloads.el" 19239 nil 1 nil nil 19239 (overwrite-mode)) ("~/android-pro/HelloWorld/src/com/crane/helloworld/helloWorld.java" 386 368 1 nil nil 386 (overwrite-mode)) ("~/android-pro/HelloWorld/res/layout/main.xml" 487 nil 1 nil nil 487 (overwrite-mode)) ("~/android-pro/HelloWorld.java" 3 nil 1 nil nil 3 (overwrite-mode)) ("~/codes/c-code/consttest.cpp" 397 nil 1 nil nil 397 (overwrite-mode)) ("~/codes/c-code/AnimalManager.cpp" 2263 2170 1 nil nil 2170 (overwrite-mode)) ("~/codes/c-code/ArgsInMain.cpp" 322 nil 1 nil nil 322 (overwrite-mode)) ("~/codes/c-code/justtest.cpp" 854 nil 1 nil nil 854 (overwrite-mode)) ("~/codes/javacodes/ObjectTest.java" 184 220 1 nil nil 184 (overwrite-mode)) ("~/.emacs.d/elpa/emacs-droid-0.0.0/emacs-droid-autoloads.el" 341 nil 1 nil nil 341 (overwrite-mode)) ("~/codes/c-code/io/iosecond.cpp" 119 nil 1 nil nil 119 (overwrite-mode)) ("~/codes/c-code/io/ioone.cpp" 160 211 1 nil nil 126 (overwrite-mode)) ("~/.emacs.d/README.org" 8537 nil 1 nil nil 8537 (overwrite-mode)) ("~/codes/c-code/virtualcon.cpp" 155 nil 1 nil nil 155 (overwrite-mode)) ("~/android_4.0/download.sh" 163 1 1 nil nil 163 (overwrite-mode)) ("~/codes/c-code/extends.cpp" 655 557 1 nil nil 557 (overwrite-mode)) ("~/codes/c-code/Rational.cpp" 342 nil 1 nil nil 342 (overwrite-mode)) ("~/codes/c-code/new.cpp" 488 170 1 nil nil 488 (overwrite-mode)) ("~/codes/c-code/childobject.cpp" 437 437 1 nil nil 436 (overwrite-mode)) ("~/codes/c-code/constmemeber.cpp" 327 159 1 nil nil 326 (overwrite-mode)) ("~/codes/c-code/input.cpp" 467 60 1 nil nil 467 (overwrite-mode)) ("~/codes/c-code/this.cpp" 346 nil 1 nil nil 346 (overwrite-mode)) ("~/codes/c-code/helloworld.cpp" 344 nil 1 nil nil 344 (overwrite-mode)) ("~/codes/c-code/pointer.cpp" 319 215 1 nil nil 252 (overwrite-mode)) ("~/codes/c-code/friendclass.cpp" 444 586 1 nil nil 586 (overwrite-mode)) ("~/codes/c-code/objectLife.cpp" 536 536 1 nil nil 150 (overwrite-mode)) ("~/codes/c-code/friendTest.cpp" 391 nil 1 nil nil 391 (overwrite-mode)) ("~/codes/c-code/test.c" 675 91 1 nil nil 675 (overwrite-mode)) ("~/codes/c-code/time.c" 188 5 1 nil nil 193 (overwrite-mode)) ("~/codes/javacodes/FirstJava.java" 663 278 1 nil nil 660 (overwrite-mode)) ("~/codes/c-code/fork.c" 211 nil 1 nil nil 211 (overwrite-mode)) ("~/.emacs.keyfreq" 1 nil 1 nil nil 1 (overwrite-mode)) ("~/codes/c-code/fork" 5182 1337 1 nil nil 5182 (overwrite-mode)) ("~/CodeLife/FirstJava.java" 846 802 1 nil nil 816 (overwrite-mode))))
(setq-default file-name-history '("~/.emacs.d/init.el" "/home/crane/.emacs.d/init.el" "/home/crane/codes/javacodes/Compute.c" "/home/crane/codes/javacodes/Compute.class" "/home/crane/codes/javacodes/Compute.h" "/home/crane/codes/javacodes/Compute.java" "/home/crane/codes/javacodes/NativeTest.h" "/home/crane/CodeLife/java/getTheOSInfoInJava" "/home/crane/codes/javacodes/OSInfo.java" "/home/crane/codes/javacodes/cimplOne.c" "/home/crane/codes/javacodes/NativeTest.java" "/home/crane/codes/c-code/share.c" "/home/crane/codes/c-code/helloworld.cpp" "~/codes/javacodes/cimplOne.c" "/home/crane/codes/javacodes/linuxC.sh" "~/codes/javacodes/NativeTest.h" "/home/crane/.bashrc" "/etc/profile" "/home/crane/codes/shellscript/linuxC.sh" "/home/crane/CodeLife/database/exportOrImportDB" "/home/crane/CodeLife/database/command" "/home/crane/test2.sql" "/home/crane/commandOfMysql.txt" "/home/crane/CodeLife/database/中文乱码的解决" "/etc/mysql/my.cnf" "/home/crane/CodeLife/database/索引提高查找效率的原理" "/home/crane/learningemacs/emacs配置.txt" "/home/crane/.profile" "~/commandOfMysql.txt" "/home/crane/.emacs.d/elpa/android-mode-0.2.5/android-mode-autoloads.el" "/usr/share/emacs/24.3/etc/HELLO" "/home/crane/codes/javacodes/Hello.java" "/home/crane/android-pro/SecondOne/src/com/crane/secondone/Main.java" "~/android-pro/SecondOne/AndroidManifest.xml" "/home/crane/.netrc" "/home/crane/.emacs.d/readme.txt" "/home/crane/.emacs.d/README.org" "~/.emacs.d/mode-line-awesome.el" "/home/crane/.emacs.d/mode-line-awesome.el" "/home/crane/.emacs.d/init-emacs-w3m.el" "/home/crane/.emacs.d/diminish.el" "/home/crane/.emacs.d/init-modeline.el" "~/.emacs.d/diminish.el" "/home/crane/resumes/应聘Android开发工程师岗位_黄仁鹤_华中科技大学_15527838254.txt" "~/.emacs.d/emdroid.el" "/home/crane/.emacs.d/emdroid.el" "/home/crane/android-pro/src/com/crane/hello/Hello.java" "/home/crane/.emacs.d/elpa/android-mode-0.2.5/android-mode.el" "~/AndroidSDK/android-sdk-linux/tools/ant/build.xml" "~/android-pro/src/com/crane/hello/Hello.java" "/home/crane/.emacs.d/java-mode-indent-annotations.el" "/home/crane/android-pro/res/layout/main.xml" "/home/crane/workspace/oschina-android-app/src/net/oschina/app/AppConfig.java" "/home/crane/.emacs.d/init-git.el" "~/MyProject/Readme.txt" "~/.emacs.d/init-smex.el" "~/.emacs.d/init-textile.el" "~/.emacs.d/elpa/ecb-snapshot-20120830/ecb-snapshot-autoloads.el" "~/.emacs.d/elpa/ecb-2.40/ecb-autoloads.el" "/home/crane/codes/shellscript/exeone.sh" "/home/crane/codes/shellscript/one.sh" "~/codes/shellscript/helloworld.sh" "/home/crane/codes/c-code/ConstMethod.cpp" "/home/crane/.emacs.d/init-gnus.el" "/home/crane/codes/shellscript/network.sh" "/home/crane/codes/shellscript/exmaple.js" "/home/crane/.authinfo.gpg" "/home/crane/.emacs.d/init-gud.el" "/home/crane/codes/shellscript/policykit.sh" "/home/crane/codes/shellscript/helloworld.sh" "~/.emacs.d/init-emacs-w3m.el" "/home/crane/.emacs-places" "/home/crane/codes/shellscript/firstshell.sh" "/home/crane/JNI.pdf" "/home/crane/codes/pythoncodes/helloworld.py" "~/.emacs.d/elpa/github-browse-file-0.3.0/github-browse-file-autoloads.el" "~/.emacs.d/elpa/w3m-20140420.2007/w3m-autoloads.el" "/home/crane/.emacs.d/init-web-mode.el" "/home/crane/android-pro/HelloWorld/res/layout/main.xml" "/home/crane/android-pro/HelloWorld/src/com/crane/helloworld/helloWorld.java" "/home/crane/android-pro/HelloWorld.java" "/home/crane/.emacs" "~/.emacs.d/elpa/emacs-droid-0.0.0/emacs-droid-autoloads.el" "~/.emacs.d/elpa/android-mode-0.2.5/android-mode-autoloads.el" "/home/crane/codes/c-code/consttest.cpp" "/home/crane/codes/c-code/AnimalManager.cpp" "/home/crane/codes/c-code/ArgsInMain.cpp" "/home/crane/codes/javacodes/ObjectTest.java" "/home/crane/codes/javacodes/FirstJava.java" "/home/crane/codes/c-code/justtest.cpp" "/home/crane/codes/c-code/io/iosecond.cpp" "/home/crane/codes/c-code/io/ioone.cpp" "/home/crane/codes/c-code/virtualcon.cpp" "/home/crane/codes/c-code/virtualTest.cpp" "~/android_4.1/Android41/Makefile" "/etc/hosts" "/home/crane/android_4.0/download.sh" "/home/crane/codes/c-code/extends.cpp" "/home/crane/codes/c-code/Rational.cpp" "/home/crane/codes/c-code/new.cpp" "/home/crane/codes/c-code/childobject.cpp" "/home/crane/codes/c-code/constmemeber.cpp" "/home/crane/codes/c-code/input.cpp" "/home/crane/codes/c-code/this.cpp" "/home/crane/codes/c-code/pointer.cpp" "/home/crane/codes/c-code/friendclass.cpp" "/home/crane/codes/c-code/friendclass.out" "/home/crane/codes/c-code/fork" "/home/crane/codes/c-code/objectLife.cpp" "/home/crane/codes/c-code/objectLife.out" "/home/crane/codes/c-code/friendTest.cpp" "/home/crane/codes/c-code/friendTest.out" "/home/crane/codes/c-code/fork.c" "/home/crane/codes/c-code/test.c" "/home/crane/codes/c-code/test.out" "/home/crane/codes/c-code/test" "~/codes/c-code/test.c" "/home/crane/codes/c-code/time.c" "~/codes/c-code/fork.c" "~/codes/c-code/time" "~/codes/javacodes/FirstJava.java" "/usr/share/emacs/24.3/etc/ORDERS" "~/resumes/应聘Android客户端开发工程师岗位_黄仁鹤_华中科技大学_15527838254.pdf" "~/codes/javacodes/FisstJava.java" "~/.android/sites-settings.cfg" "~/codes/javacodes/#FisstJava.java#" "/home/crane/codes/javacodes/FisstJava.java" "/home/crane/.emacs.keyfreq" "info~/" "/home/crane/CodeLife/FirstJava.java" "~/.emacs.d/snippets/java-mode/hello_world.yasnippet" "/home/crane/CodeLife/newone"))
(setq-default buffer-name-history '("linuxC.sh" "init-emacs-w3m.el" "network.sh" "policykit.sh" "crane" "node" "justtest.cpp" "time.c"))
(setq-default command-history '((load-file "/home/crane/.emacs.d/init.el") (execute-extended-command nil "load-file") (find-file "/home/crane/.emacs.d/init.el") (find-file "/home/crane/codes/javacodes/Compute.c") (eshell nil) (execute-extended-command nil "eshell") (find-file "/home/crane/codes/javacodes/Compute.class") (find-file "/home/crane/codes/javacodes/Compute.h") (find-file "/home/crane/codes/javacodes/Compute.java") (goto-line 8 nil) (execute-extended-command nil "goto-line") (goto-line 17 nil) (find-file "/home/crane/codes/javacodes/NativeTest.h") (find-file "/home/crane/CodeLife/java/getTheOSInfoInJava") (find-file "/home/crane/codes/javacodes/OSInfo.java") (eshell-forward-argument 1) (execute-extended-command nil "eshell-forward-argument") (find-file "/home/crane/codes/javacodes/cimplOne.c") (find-file "/home/crane/codes/javacodes/NativeTest.java") (find-file "/home/crane/codes/c-code/share.c") (find-file "/home/crane/codes/c-code/helloworld.cpp") (ibuffer-find-file "/home/crane/codes/javacodes" t) (find-file "/home/crane/codes/javacodes/linuxC.sh") (switch-to-buffer "linuxC.sh") (ibuffer-find-file "/home/crane/codes/javacodes/NativeTest.h" t) (find-file "/home/crane/.bashrc") (find-file "/etc/profile") (execute-extended-command nil "inferior-haskell-kind") (find-file "/home/crane/codes/shellscript/linuxC.sh") (find-file "/home/crane/CodeLife/database/exportOrImportDB") (find-file "/home/crane/CodeLife/database/command") (find-file "/home/crane/test2.sql") (find-file "/home/crane/commandOfMysql.txt") (find-file "/home/crane/CodeLife/database/中文乱码的解决") (find-file "/etc/mysql/my.cnf") (find-file "/home/crane/CodeLife/database/索引提高查找效率的原理") (find-file "/home/crane/learningemacs/emacs配置.txt") (find-file "/home/crane/.profile") (list-packages nil) (execute-extended-command nil "list-packages") (ibuffer-find-file "/home/crane/commandOfMysql.txt" t) (find-file "/home/crane/.emacs.d/elpa/android-mode-0.2.5/android-mode-autoloads.el") (jdb "javac Hello.java") (execute-extended-command nil "jdb") (find-file "/home/crane/codes/javacodes/Hello.java") (find-file "/home/crane/android-pro/SecondOne/src/com/crane/secondone/Main.java") (android-create-project "/home/crane/android-pro/SecondOne" "com.crane.secondone" "Main") (execute-extended-command nil "android-create-project") (find-file "/home/crane/.netrc") (find-file "/home/crane/.emacs.d/readme.txt") (find-file "/home/crane/.emacs.d/README.org")))
(setq-default compile-history '("gcc test.c -o test" "gcc time.c -o time" "gcc -o time.c time" "gcc -o time.c time.out" "javac FirstJava.java" "javac"))
(setq-default dired-shell-command-history '("dired" "open"))
(setq-default extended-command-history '("load-file" "eshell" "goto-line" "eshell-forward-argument" "inferior-haskell-kind" "list-packages" "jdb" "android-create-project" "shell" "diminish" "describe-minor-mode-from-indicator" "w3m" "emdroid-create-activity" "android-ant-installd" "android-ant" "android-start-emulator" "android-mode" "speedbar" "ecb-activate" "package-install" "ecb-open-source-in-editwin1" "gnus" "replace-string" "comment-region" "comment-or-uncomment-region" "rename-buffer" "w3m-search" "doc-view-mode" "github-browse-file" "w3m-fb-mode" "w3m-goto-url" "w3m-download" "load-library" "java-mode" "js-beautify" "mouse-secondary-save-then-kill" "dired" "compile" "format-find-file" "find-file" "gdb" "c-mode" "gnus-score-mode" "color-theme-blue-gnus" "completion-list-mode" "auto-compile-mode" "run-prolog" "diredp-dired-files" "cmake-mode" "info" "text-mode"))
(setq-default global-mark-ring 'nil)
(setq-default gud-gdb-history '("gdb time" "gdb FirstJava"))
(setq-default gud-jdb-history '("javac Hello.java" "jdb FirstJava" "jdb FirstJava.java"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-external-command-history '("deallocvt"))
(setq-default helm-ff-history '("/home/crane/.emacs.d/" "/home/crane/codes/javacodes/" "/home/crane/codes/" "/home/crane/" "/home/crane/android-pro/" "/home/crane/.emacs.d/elpa/" "/home/crane/android-pro/src/com/crane/hello/" "/home/crane/workspace/oschina-android-app/src/net/" "/home/crane/codes/shellscript/" "/" "/home/crane/codes/c-code/" "/home/crane/简历/"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1))))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default ido-buffer-history '("linuxC.sh" "init-emacs-w3m.el" "network.sh" "policykit.sh" "justtest.cpp" "time.c"))
(setq-default ido-file-history '("init.el" "Compute.c" "Compute.class" "Compute.h" "Compute.java" "NativeTest.h" "getTheOSInfoInJava" "CodeLife/" "OSInfo.java" "cimplOne.c" "NativeTest.java" "share.c" "helloworld.cpp" "linuxC.sh" nil ".bashrc" "profile" "exportOrImportDB" "command" "test2.sql" "commandOfMysql.txt" "中文乱码的解决" "my.cnf" "索引提高查找效率的原理" "emacs配置.txt" ".profile" "android-mode-autoloads.el" "Hello.java" "Main.java" ".netrc" "readme.txt" "README.org" "mode-line-awesome.el" "init-emacs-w3m.el" "diminish.el" "init-modeline.el" ".emacs.d/" "应聘Android开发工程师岗位_黄仁鹤_华中科技大学_15527838254.txt" "emdroid.el" "android-mode.el" "java-mode-indent-annotations.el" "main.xml" "AppConfig.java" "init-git.el" "exeone.sh" "one.sh" "ConstMethod.cpp" "init-gnus.el" "network.sh" "exmaple.js" ".authinfo.gpg"))
(setq-default minibuffer-history '("/home/crane/.emacs.d/init.el" "8" "17" "/home/crane/codes/javacodes/Native" "/home/crane/codes/shell" "/home/crane/mysql.txt" "" "Main" "com.crane.secondone" "/home/crane/android-pro/SecondOne" "/home/crane/.emacs.d/mode-line" "all" "/home/crane/.emacs.d/" "info" "/home/crane/.emacs.d/dimi" "Hello" "/home/crane/.emacs.d/emdo" "/home/crane/.emacs.d/emdroi" "hello" "/home/crane/.emacs.d/emdroid" "Crane" "HelloWorld" "/home/crane/.emacs.d/em" "/home/crane/.emacs.d/elpa/andr" "/home/crane/android-pro/src/com/crane/hello/" "debug install" "crane" "com.crane.hello" "/home/crane/android-pr" "/home/crane/workspace/oschina-android-app/src/net/oschina/" "renhehuang" "zhenshi henbucuo le " "/home/crane/.emacs.d/init-emac" "exec-path" "w3m" "/home/crane/codes/c-code/objectLife.cpp" "/home/crane/codes/c-code/" "/home/crane/codes/c" "/home/crane/codes/c-dode" "ansi-color-faces-vector" "/home/crane/codes/javacodes/" "/home/crane/codes/javacodes" "/home/crane/re" "/home/crane/简历/" "root" "ls" "o=rwx" "/home/crane/codes/c-code" "/home/crane/codes" "/home/crane/" "/home/crane/codes/"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("renhe940318" "username" "altered" "changed"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default shell-command-history '("cd codes" "cd ~/home"))
(setq-default smex-history '(info cd 5x5 all arp dbx dig))
